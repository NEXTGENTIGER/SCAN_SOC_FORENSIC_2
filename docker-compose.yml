version: '3.8'

services:
  security-toolbox:
    build: .
    container_name: security-toolbox
    volumes:
      - ./results:/app/results
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/.X11-unix:/tmp/.X11-unix
    network_mode: host
    environment:
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    devices:
      - /dev/snd
    privileged: true
    restart: unless-stopped
    depends_on:
      - api-service
      - zap-service

  api-service:
    image: python:3.9-slim
    container_name: security-api
    volumes:
      - ./results:/app/results
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    working_dir: /app
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
    command: >
      bash -c "pip install flask flask-cors &&
              echo 'from flask import Flask, request, jsonify
              from flask_cors import CORS
              import json
              import os
              from datetime import datetime

              app = Flask(__name__)
              CORS(app)

              @app.route(\"/api/v1/report/upload_json/\", methods=[\"POST\"])
              def upload_json():
                  try:
                      data = request.json
                      timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")
                      filename = f\"api_report_{timestamp}.json\"
                      
                      with open(f\"results/{filename}\", \"w\") as f:
                          json.dump(data, f, indent=2)
                      
                      return jsonify({
                          \"status\": \"success\",
                          \"message\": \"Report received and saved\",
                          \"filename\": filename
                      })
                  except Exception as e:
                      return jsonify({
                          \"status\": \"error\",
                          \"message\": str(e)
                      }), 500

              if __name__ == \"__main__\":
                  app.run(host=\"0.0.0.0\", port=5000)' > app.py &&
              python app.py"
    restart: unless-stopped
    networks:
      - security-network

  zap-service:
    image: owasp/zap2docker-stable
    container_name: zap-service
    ports:
      - "8080:8080"
      - "8090:8090"
    environment:
      - ZAP_WEBSWING_OPTS=-Xmx512m
    volumes:
      - ./results:/zap/results
    command: zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.key=zap
    restart: unless-stopped
    networks:
      - security-network

networks:
  security-network:
    driver: bridge 
